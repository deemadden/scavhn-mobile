//
//
// Copyright (c) 2013 SoftSource. All rights reserved.
//


#import <CoreData/CoreData.h>
#import "ScavsDataStore.h"
#import "CoreDataContextSingleton.h"
#import "ScavsDownload.h"
#import "NSArray+Functional.h"
#import "Scav.h"
#import "ScavItem.h"
#import "CoreDataHelper.h"
#import "NSManagedObjectContext+Saving.h"
#import "UUIDShortener.h"
#import "Player.h"
#import "PlayerLog.h"

@implementation ScavsDataStore

+ (void)saveAllScavsJsonToCoreData:(id)json withError:(NSError **)pError
{
  // Get a handle on the context.  We're going to use the one on the main thread, which is okay for now,
  // As we're back on the main thread at the time this work is done.
  NSManagedObjectContext* context = [[CoreDataContextSingleton sharedInstance] managedObjectContext];

  // Create a new ScavsDownload object
  ScavsDownload* scavsDownload = [NSEntityDescription insertNewObjectForEntityForName:@"ScavsDownload"
                                                               inManagedObjectContext:context];

  // Capture the date that the data download was done
  scavsDownload.downloadDate = [NSDate date];

  // We know the JSON is an array, so we can just start walking over it
  // Making use of the category method "each" to iterate
  [json each:^(NSDictionary* scavDictionary){

    // Create a new Scav object
    Scav* scav = [NSEntityDescription insertNewObjectForEntityForName:@"Scav" inManagedObjectContext:context];

    // populate it
    scav.scavId = scavDictionary[@"_id"];
    scav.scavDescription = scavDictionary[@"description"];
    scav.image = scavDictionary[@"image"];
    scav.imageType = scavDictionary[@"imageType"];
    scav.level = scavDictionary[@"level"];
    scav.name = scavDictionary[@"name"];
    scav.duration = scavDictionary[@"duration"];
    scav.thumbnail = scavDictionary[@"thumbnail"];
    scav.thumbnailType = scavDictionary[@"thumbnailType"];

    // Get a handle on the scav items
    NSArray* scavItemsDictionaries = scavDictionary[@"items"];

    // Now iterate over those
    [scavItemsDictionaries each:^(NSDictionary* scavItemDictionary)
    {
      // Create a ScavItem object
      ScavItem* scavItem = [NSEntityDescription insertNewObjectForEntityForName:@"ScavItem" inManagedObjectContext:context];

      // populate it
      scavItem.scavItemId = scavItemDictionary[@"_id"];
      scavItem.coordinates = scavItemDictionary[@"coordinates"];
      scavItem.hint = scavItemDictionary[@"hint"];
      scavItem.thumbnail = scavItemDictionary[@"thumbnail"];
      scavItem.thumbnailType = scavItemDictionary[@"thumbnailType"];
      scavItem.name = scavItemDictionary[@"name"];
      scavItem.pointColor = scavItemDictionary[@"pointColor"];
      scavItem.pointValue = [CoreDataHelper objectToNumber:scavItemDictionary[@"pointValue"]];

      // Add the ScavItem object to the Scav object's scavItems collection
      // This is just establishing a foreign key relationship
      // in SQLLite under the covers
      [scav addScavItemsObject:scavItem];
    }];

    // Add the Scav object to the ScavsDownload's scavs collection
    // same deal here.  Just establishing a foreign key relationship
    [scavsDownload addScavsObject:scav];
  }];

  // Now that we've got the object (read: transaction)
  // built up, we can commit it to SQLLite.
  // this is done by calling save on context.
  // we're doing it here with a category method
  // hanging off of NSManagedObjectContext
  [context saveToStore:pError];
}


+ (void)saveBeginScavDataForPlayer:(NSString *)playerName
              withSelectedScavName:(NSString *)scavName
        withSelectedScavOriginalId:(NSString *)scavId
                     withStartTime:(NSString *)startTime
                       withContext:(NSManagedObjectContext *)context
                         withError:(NSError **)pError
{
  // Fetch the Scav selected by the player
  Scav* selectedScav = [[[CoreDataContextSingleton sharedInstance] getEntityObjectsOfType:@"Scav"
                                                                               whereField:@"scavId"
                                                                                   equals:scavId
                                                                              withContext:context
                                                                                withError:pError] firstObject];

  // Generate a GUID for scavMongoId.  Using a Category
  // Found on Github - UUID Shortener - to reduce the
  // Standard GUID generated by NSUUID to a shorter base32 version
  // Also coercing all alpha characters to lowercase, to get it
  // Closer to the ObjectIDs generated by Mongo
  NSString* placeholderMongoId = [[[NSUUID UUID] shortUUIDString] lowercaseString];

  // Update the Scav
  selectedScav.scavMongoId = placeholderMongoId;
  selectedScav.status = @"INPROGRESS";

  // Update the ScavItems with status and assign some placeholder MongoId's to them as well
  for (ScavItem* scavItem in selectedScav.scavItems)
  {
    scavItem.status = @"ACTIVE";
  }

    // Save the Scav start info
  Player* player = [NSEntityDescription insertNewObjectForEntityForName:@"Player" inManagedObjectContext:context];
  PlayerLog* playerLog = [NSEntityDescription insertNewObjectForEntityForName:@"PlayerLog" inManagedObjectContext:context];

  player.name = playerName;
  playerLog.scavName = scavName;
  playerLog.startTime = startTime;

  [player addPlayerLogsObject:playerLog];

  // Commit
  [context saveToStore:pError];
}

@end